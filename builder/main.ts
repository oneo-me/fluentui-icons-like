import * as path from "path";
import * as fs from "fs";
import * as svgo from "svgo";
import { IIcon } from "./icons/IIcon";
import { PathIcon } from "./icons/PathIcon";
import { SvgIcon } from "./icons/SvgIcon";

export class MainOptions {
  constructor(public Project: string, public Assets: string) {}
}

export function Main(options: MainOptions) {
  const icons = loadIcons(options.Assets);
  optimizeSvg(icons);
}

// call svgo to optimize svg icons
function optimizeSvg(icons: IIcon[]) {
  icons.forEach((icon) => {
    if (icon instanceof SvgIcon) {
      const svgText = fs.readFileSync(icon.File, "utf8");
      const result = svgo.optimize(svgText);
      icon.Data = svgText2Data(result.data);
    }
  });
}

function svgText2Data(svgText: string): string {
  const regex = /d="([^"]+)"/g;
  const matches = svgText.matchAll(regex);
  const result: string[] = [];

  for (const match of matches) {
    result.push(match[1]);
  }

  return result.join(" ");
}

function loadIcons(assets: string): IIcon[] {
  const icons: IIcon[] = [];

  // add custom Icons
  icons.push(
    new PathIcon(
      "Github",
      24,
      "M12 2C6.475 2 2 6.475 2 12C2 16.425 4.8625 20.1625 8.8375 21.4875C9.3375 21.575 9.525 21.275 9.525 21.0125C9.525 20.775 9.5125 19.9875 9.5125 19.15C7 19.6125 6.35 18.5375 6.15 17.975C6.0375 17.6875 5.55 16.8 5.125 16.5625C4.775 16.375 4.275 15.9125 5.1125 15.9C5.9 15.8875 6.4625 16.625 6.65 16.925C7.55 18.4375 8.9875 18.0125 9.5625 17.75C9.65 17.1 9.9125 16.6625 10.2 16.4125C7.975 16.1625 5.65 15.3 5.65 11.475C5.65 10.3875 6.0375 9.4875 6.675 8.7875C6.575 8.5375 6.225 7.5125 6.775 6.1375C6.775 6.1375 7.6125 5.875 9.525 7.1625C10.325 6.9375 11.175 6.825 12.025 6.825C12.875 6.825 13.725 6.9375 14.525 7.1625C16.4375 5.8625 17.275 6.1375 17.275 6.1375C17.825 7.5125 17.475 8.5375 17.375 8.7875C18.0125 9.4875 18.4 10.375 18.4 11.475C18.4 15.3125 16.0625 16.1625 13.8375 16.4125C14.2 16.725 14.5125 17.325 14.5125 18.2625C14.5125 19.6 14.5 20.675 14.5 21.0125C14.5 21.275 14.6875 21.5875 15.1875 21.4875C17.1727 20.8173 18.8977 19.5415 20.1198 17.8395C21.3419 16.1376 21.9995 14.0953 22 12C22 6.475 17.525 2 12 2Z"
    ),
    new PathIcon(
      "Avalonia",
      35,
      "M11.9961 17.4593C11.9961 14.414 14.4649 11.9452 17.5102 11.9452C20.5556 11.9452 23.0243 14.414 23.0243 17.4593C23.0243 20.5047 20.5556 22.9734 17.5102 22.9734C14.4649 22.9734 11.9961 20.5047 11.9961 17.4593Z M30.6617 34.928C32.8459 34.928 34.6403 33.2918 34.8916 31.1752L34.9219 16.9955C34.6735 7.56697 26.9525 0 17.464 0C7.8189 0 0 7.8189 0 17.464C0 27.0059 7.65245 34.7631 17.155 34.928H30.6617ZM17.5102 5.948C12.0131 5.948 7.41594 9.80117 6.27227 14.954C7.36719 15.2609 8.17012 16.2664 8.17012 17.4593C8.17012 18.6523 7.36719 19.6577 6.27227 19.9647C7.41593 25.1175 12.0131 28.9706 17.5102 28.9706C19.5113 28.9706 21.3931 28.4601 23.0325 27.562V28.8927H29.0215V17.9365C29.0252 17.8381 29.0239 17.722 29.0226 17.6117C29.022 17.5587 29.0215 17.507 29.0215 17.4593C29.0215 11.1018 23.8677 5.948 17.5102 5.948ZM5.51258 19.2938C6.52995 19.2938 7.35468 18.4691 7.35468 17.4517C7.35468 16.4343 6.52995 15.6096 5.51258 15.6096C4.49521 15.6096 3.67047 16.4343 3.67047 17.4517C3.67047 18.4691 4.49521 19.2938 5.51258 19.2938Z"
    ),
    new PathIcon(
      "Svelte",
      112,
      "M41.464 4.98321C56.314 -4.47679 76.854 -0.0667877 87.254 14.8132V14.8932C89.722 18.3485 91.4753 22.2618 92.4112 26.4036C93.347 30.5455 93.4466 34.8324 92.7039 39.0132C91.9783 43.0034 90.4545 46.806 88.224 50.1932C91.4821 56.4028 92.5765 63.5217 91.334 70.4232C90.5885 74.5115 89.0018 78.4003 86.6745 81.8432C84.3471 85.286 81.3298 88.2078 77.814 90.4232L51.734 106.973C36.884 116.433 16.344 112.023 5.94395 97.1432C3.47392 93.6889 1.71937 89.7757 0.783432 85.6335C-0.152496 81.4914 -0.250923 77.2039 0.493958 73.0232C1.2115 69.0323 2.73225 65.2287 4.96396 61.8432C1.7077 55.6293 0.616821 48.5069 1.86395 41.6032C2.60355 37.5129 4.18787 33.6217 6.51576 30.1781C8.84366 26.7344 11.864 23.814 15.384 21.6032L41.464 4.98321ZM26.4973 97.9536C30.4743 99.4289 34.8081 99.6487 38.914 98.5832C40.7883 98.0792 42.5754 97.2936 44.214 96.2532L70.304 79.6332C72.4235 78.2992 74.2414 76.5375 75.6413 74.4609C77.0412 72.3843 77.9924 70.0384 78.434 67.5732C78.8808 65.0597 78.8209 62.4822 78.2576 59.9921C77.6943 57.5021 76.6391 55.1497 75.154 53.0732C72.7386 49.5883 69.3112 46.9292 65.3354 45.4555C61.3597 43.9818 57.0272 43.7646 52.924 44.8332C51.0466 45.3286 49.2583 46.1148 47.624 47.1632L37.624 53.5032C37.1276 53.8133 36.5886 54.0492 36.024 54.2032C34.7948 54.513 33.5005 54.4416 32.3128 53.9987C31.1251 53.5558 30.1001 52.7622 29.374 51.7232C28.9264 51.0953 28.6076 50.385 28.4359 49.6332C28.2643 48.8815 28.2432 48.1031 28.374 47.3432C28.5091 46.6016 28.7966 45.8961 29.2183 45.2713C29.64 44.6465 30.1867 44.1159 30.824 43.7132L56.914 27.1232C57.4083 26.8094 57.9479 26.5733 58.514 26.4232C59.7375 26.1011 61.03 26.1592 62.2197 26.5897C63.4094 27.0202 64.4399 27.8028 65.174 28.8332C65.974 29.961 66.3494 31.3353 66.2339 32.7132L66.144 33.7132L67.144 34.0032C70.8084 35.1129 74.2576 36.8374 77.344 39.1032L78.674 40.1032L79.174 38.6032C79.4309 37.8069 79.6379 36.9953 79.7939 36.1732C80.242 33.6597 80.1826 31.082 79.6193 28.5917C79.056 26.1015 78.0001 23.7492 76.5139 21.6732C74.0989 18.1876 70.6721 15.5274 66.6965 14.0519C62.7209 12.5765 58.3883 12.3571 54.284 13.4232C52.4234 13.926 50.6498 14.7082 49.024 15.7432L22.904 32.3632C20.7844 33.6972 18.9665 35.4589 17.5666 37.5355C16.1667 39.6121 15.2156 41.958 14.774 44.4232C14.3228 46.9348 14.3779 49.5111 14.936 52.0011C15.4941 54.4911 16.544 56.8445 18.024 58.9232C20.4393 62.4002 23.8618 65.0538 27.8309 66.527C31.7999 68.0002 36.1249 68.2222 40.224 67.1632C42.0947 66.6625 43.8784 65.8803 45.514 64.8432L55.514 58.4932C56.0083 58.1794 56.5479 57.9433 57.114 57.7932C58.3503 57.4724 59.6553 57.5381 60.8532 57.9815C62.0511 58.4249 63.0844 59.2247 63.814 60.2732C64.2638 60.8981 64.584 61.6066 64.7557 62.3571C64.9274 63.1076 64.9473 63.8849 64.814 64.6432C64.6819 65.3872 64.3957 66.0954 63.9738 66.7222C63.5518 67.3491 63.0035 67.8808 62.364 68.2832L36.324 84.9032C35.8287 85.2153 35.2893 85.4513 34.724 85.6032C33.4876 85.924 32.1826 85.8583 30.9847 85.4149C29.7868 84.9715 28.7535 84.1717 28.024 83.1232C27.2233 82.006 26.8377 80.6443 26.934 79.2732L27.024 78.2732L26.024 77.9832C22.3726 76.8827 18.934 75.1719 15.854 72.9232L14.514 71.9232L14.024 73.4232C13.7587 74.2103 13.5515 75.0158 13.404 75.8332C12.9545 78.3461 13.0123 80.9234 13.5739 83.4136C14.1355 85.9038 15.1895 88.2565 16.674 90.3332C19.0916 93.8186 22.5203 96.4783 26.4973 97.9536Z"
    )
  );

  // add all icons from assets
  fs.readdirSync(assets).forEach((iconFolder: string) => {
    if (iconFolder === ".DS_Store") {
      return;
    }
    const svgIcons: SvgIcon[] = [];
    const folderPath = path.join(assets, iconFolder, "SVG");
    const files = fs.readdirSync(folderPath);
    files.forEach((file: string) => {
      if (file.endsWith(".svg")) {
        const filePath = path.join(folderPath, file);
        svgIcons.push(new SvgIcon(filePath));
      }
    });

    const groupedIcons: { [key: string]: SvgIcon[] } = {};
    svgIcons.forEach((icon) => {
      if (!groupedIcons[icon.Type]) {
        groupedIcons[icon.Type] = [];
      }
      groupedIcons[icon.Type].push(icon);
    });

    Object.keys(groupedIcons).forEach((type) => {
      let closestSizeIcon: SvgIcon | undefined;
      let closestSizeDiff = Infinity;
      groupedIcons[type].forEach((icon) => {
        const sizeDiff = Math.abs(icon.Size - 20);
        if (sizeDiff < closestSizeDiff) {
          closestSizeIcon = icon;
          closestSizeDiff = sizeDiff;
        }
      });
      if (closestSizeIcon) {
        icons.push(closestSizeIcon);
      }
    });
  });

  // sort icons
  icons.sort((a, b) => {
    if (a.Key < b.Key) {
      return -1;
    }
    if (a.Key > b.Key) {
      return 1;
    }
    return 0;
  });

  return icons;
}
